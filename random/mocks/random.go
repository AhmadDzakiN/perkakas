// Code generated by MockGen. DO NOT EDIT.
// Source: random.go

// Package mock_random is a generated GoMock package.
package mock_random

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIRandomStringGenerator is a mock of IRandomStringGenerator interface
type MockIRandomStringGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockIRandomStringGeneratorMockRecorder
}

// MockIRandomStringGeneratorMockRecorder is the mock recorder for MockIRandomStringGenerator
type MockIRandomStringGeneratorMockRecorder struct {
	mock *MockIRandomStringGenerator
}

// NewMockIRandomStringGenerator creates a new mock instance
func NewMockIRandomStringGenerator(ctrl *gomock.Controller) *MockIRandomStringGenerator {
	mock := &MockIRandomStringGenerator{ctrl: ctrl}
	mock.recorder = &MockIRandomStringGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIRandomStringGenerator) EXPECT() *MockIRandomStringGeneratorMockRecorder {
	return m.recorder
}

// String mocks base method
func (m *MockIRandomStringGenerator) String(length int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String", length)
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockIRandomStringGeneratorMockRecorder) String(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockIRandomStringGenerator)(nil).String), length)
}
